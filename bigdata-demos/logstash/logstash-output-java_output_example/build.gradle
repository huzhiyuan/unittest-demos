import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: "distribution"
apply from: LOGSTASH_CORE_PATH + "/../rubyUtils.gradle"

//group 'org.logstash.javaapi'
//version "${file("VERSION").text.trim()}"
//description = "Example Java output implementation"

group                      'org.logstash.javaapi' // must match the package of the main plugin class
version                    '0.0.1' // read from required VERSION file
description                = "Example Java output implementation"
pluginInfo.licenses        = ['Apache-2.0'] // list of SPDX license IDs
pluginInfo.longDescription = "This gem is a Logstash plugin required to be installed on top of the Logstash core pipeline using \$LS_HOME/bin/logstash-plugin install gemname. This gem is not a stand-alone program"
pluginInfo.authors         = ['Elasticsearch']
pluginInfo.email           = ['info@elastic.co']
pluginInfo.homepage        = "http://www.elastic.co/guide/en/logstash/current/index.html"
pluginInfo.pluginType      = "output"
pluginInfo.pluginClass     = "JavaOutputExample"
pluginInfo.pluginName      = "java_output_example" // must match the @LogstashPlugin annotation in the main plugin class



sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        //mavenCentral() Âç°
        allprojects {
            repositories {
                maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
            }
        }
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

repositories {
    //mavenCentral()
    allprojects {
        repositories {
            maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    classifier = null
}

dependencies {
    compile 'org.apache.logging.log4j:log4j-api:2.9.1'
    compile fileTree(dir: LOGSTASH_CORE_PATH, include: "**/*.jar")

    testCompile 'junit:junit:4.12'
    testCompile 'org.jruby:jruby-complete:9.1.13.0'
    testCompile 'org.apache.logging.log4j:log4j-core:2.9.1'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task vendor(dependsOn: shadowJar) << {
    String vendorPathPrefix = "vendor/jar-dependencies"
    String projectGroupPath = project.group.replaceAll('\\.', '/')
    File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}/${project.name}-${project.version}.jar")
    projectJarFile.mkdirs()
    Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
}

task generateRubySupportFiles() {
    doLast {
        generateRubySupportFilesForPlugin(project.description, project.group, version)
    }
}

task removeObsoleteJars() {
    doLast {
        new FileNameFinder().getFileNames(
                projectDir.toString(),
                "vendor/**/" + pluginInfo.pluginFullName() + "*.jar",
                "vendor/**/" + pluginInfo.pluginFullName() + "-" + version + ".jar").each { f ->
            delete f
        }
    }
}

task gem(dependsOn: [downloadAndInstallJRuby, removeObsoleteJars, vendor, generateRubySupportFiles]) {
    doLast {
        buildGem(projectDir, buildDir, pluginInfo.pluginFullName() + ".gemspec")
    }
}